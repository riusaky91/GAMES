Consola: Git con Code (Ctrl+ñ)

"pwd" => Podemos saber donde nos encontramos.
"cd [carpeta]" => nos dirigimos a una carpeta.
"cd .." => nos dirigimos a un archivo anterior.
"ls" => lista los archivos que se encuentraqn en la carpeta donde nos encontramos.
"clear" => Limpia la terminal.

Git Local

"git init" => Inicializar un repositorio en un directorio existente

"git config --global user.name [marlon]" => Añadir la identidad de usuario para los commits 
"git config --global user.email [marlonleonardo.er@gmail.com]" => Añadir la identidad de correo para los commits
"git config --list" => verificar la configuracion
"git config --global -list" => verificar la configuracion de ususario

"git log" => muestra el estado del repositorio y los commits
"git log --oneline --decorate --all --graph" => muestra el estado del repositorio y los commits en una forma resumida
"git status" => Verificar el estado de los archivos en el repositorio
"git diff [archivo.txt]" => Verificar los cambios dentro de un archivo modificado comparandolo con el archivo que esta en el directorio de trabajo
"git diff --staged" => Este comando compara tus cambios preparados con tu última confirmación

"git add [archivo.txt]" => Iniciar el seguimiento de un archivo de nombre y tipo [archivo.txt] que no esta en el repositorio
"git add ." => Agrega todos los archivos al repositorio
"git add . --all" => Agrega todos los archivos  y directorios al repositorio
"git reset ." => Saca del stage(cuando se le da add) a todos los archivos o uno en especifico, para todos los archivos de una carpeta con extension txt seria [local/*.txt] 

"git commit" => Confirmar los archivos y añadirlos al repositorio sin comentarios (nos lleva a la pantalla de escrictura, dejamos el mensaje y para salir Esc y escribimos :wq)
"git commit -m "comentario" => Confirmar los archivos y añadirlos al repositorio con el cometario "comentario"
"git commit -v "comentario" => Confirmar los archivos y añadirlos al repositorio y provoca que se añadan también las diferencias de los cambios, para que se vea exactamente lo que se hizo.
"git commit --amend -m "comentario nuevo"" => Modifica el comentario del ultimo commit realizado

"git checkout ." => Devuelve todos los cambios a un commit anterior
"git reset --hard [id del commit]" => devulve los archivos a un commit especifico

"git config --global alias.[letra] "comando"" => Alias para un comando se ejecutaria git [letra]

"git tag [nombre de etiqueta]" => Crea una etiqueta de versionamiento para el commit actual
"git tag -d [nombre de etiqueta]" => Elimina una etiqueta 
"git tag -a [nombre de etiqueta] [id commit] -m "comentario"" => Crea una etiqueta en un commit indicado
"git push --tags" => Se suben los tags a un repositorio remoto

"Crear un archivo .gitignore en el escribir los documentos que seran ignorados por git" => archivos a ignorar

Git Remoto

"git clone [url]" => Clonar un repositorio existente
"git clone [url] [carpeta]" => Clonar un repositorio existente y añadir los datos a una carpeta de nombre "carpeta"
"git remote" => Ver que repositorios remotos estan configurados origin es el predeterminado
"git remote -v" => muestra la URL asociada a cada repositorio remoto

"git remote add origin [url]" => Para enlazar un repositorio remoto al local
"git remote add [nombre] [url]" => Para añadir un nuevo repositorio Git remoto, asignándole un nombre con el que referenciarlo fácilmente sin poner la url
"git remote set-url origin [url]" => Cambiar de conexion remota

"git push -u [origin][master]" => subir la rama maestra (master) al servidor origen (origin)

"git remote show origin" => Esto lista la URL del repositorio remoto, así como información sobre las ramas bajo seguimiento. tambien muestra qué rama se 
 envía automáticamente cuando ejecutas git push en determinadas ramas.

"git pull"=> Sirve para actualizar el servidor local despues de haber modificado el remoto
"git fetch" => Sirve apra igualar la informacion del respositorio con la local.

Git Ramas

"git branch" => Me indica en que rama me encuetro y cuantas ramas hay
"git branch [nombre]" => Agrega una nueva rama con un nombre [nombre]
"git checkout [nombre]" => El indice pasa a estar en la rama [nombre]
"git merge [nombre]" => La rama adicional se fusiona con la rama master , para hacer el merge hay que estar en la rama master
"git branch -d [nombre]" => Borrar una rama, al fusionar una rama secundaria con la rama master no es necesario mantener la rama secundaria
"git checkout -b [nombre]" => Agrega una nueva rama con un nombre [nombre] y el indice pasa a estar a esa nueva rama creada
"git checkout [id commit]" => Devuelve todos los archivos del repositorio a un commit anterior [id commit]
"git checkout [id commit] [archivo.txt]" => Devuelve el archivo [archivo.txt] del repositorio a un commit anterior [id commit]


Notas 
- Git no reconoce carpetas vacias
- el comando git push funciona únicamente si has clonado de un servidor en el que tienes permiso de escritura, y nadie ha enviado información mientras tanto. Si tú y otra persona clonais 
  a la vez, y él envía su información y luego envías tú la tuya, tu envío será rechazado. Tendrás que bajarte primero su trabajo e incorporarlo en el tuyo para que se te permita hacer un envío.
- Git Hub: Fork sirve para copiar un repositorio remoto al repositorio remoto propio
- Git Hub: Pull request sirve para contribuir con un cambio en el repositorio original despues de un fork
- se puede enlazar con netbeans, eclipse y visual studio code
- para salir con la letra "q"
- cuando hay un archivo en conflicto entre ramas se debe resolver manualmente